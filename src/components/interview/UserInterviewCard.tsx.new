"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  CalendarDays, 
  Clock, 
  Code, 
  Database, 
  Edit, 
  Layers, 
  Monitor, 
  Play, 
  Settings, 
  MessageCircle,
  Bookmark,
  Building,
  Briefcase,
  Bell,
  BellOff,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { format } from "date-fns";
import Link from "next/link";
import { Separator } from "@/components/ui/separator";

interface UserInterviewCardProps {
  interview: {
    id: string;
    title: string;
    description?: string;
    difficulty: "beginner" | "intermediate" | "advanced";
    field: "it" | "cs" | "lg" | "other";
    type: string;
    customType?: string;
    status?: 'scheduled' | 'completed' | 'cancelled' | 'expired';
    date: string | number | Date;
    emailNotification?: boolean;
    notes?: string;
    company?: string;
    position?: string;
    createdAt: string | number | Date;
  };
  onDelete?: (id: string) => void;
}

// Map difficulty to color and label
const difficultyConfig = {
  beginner: { 
    color: "bg-green-100 text-green-800 border-green-200",
    label: "Beginner"
  },
  intermediate: { 
    color: "bg-blue-100 text-blue-800 border-blue-200",
    label: "Intermediate"
  },
  advanced: { 
    color: "bg-red-100 text-red-800 border-red-200",
    label: "Advanced"
  },
};

// Map type to icon and label
const typeConfig: Record<string, { icon: any; label: string; color: string }> = {
  frontend: {
    icon: Monitor,
    label: "Frontend",
    color: "text-blue-600"
  },
  backend: {
    icon: Database,
    label: "Backend", 
    color: "text-green-600"
  },
  fullstack: {
    icon: Layers,
    label: "Full Stack",
    color: "text-purple-600"
  },
  devops: {
    icon: Settings,
    label: "DevOps",
    color: "text-orange-600"
  },
  dsa: {
    icon: Code,
    label: "Data Structures & Algorithms",
    color: "text-yellow-600"
  },
  os: {
    icon: Settings,
    label: "Operating Systems",
    color: "text-red-600"
  },
  dbms: {
    icon: Database,
    label: "DBMS",
    color: "text-indigo-600"
  },
  cn: {
    icon: Code,
    label: "Computer Networks",
    color: "text-cyan-600"
  },
  jp: {
    icon: Code,
    label: "Japanese",
    color: "text-rose-600"
  },
  eng: {
    icon: Code,
    label: "English",
    color: "text-emerald-600"
  },
  ben: {
    icon: Code,
    label: "Bengali",
    color: "text-amber-600"
  },
  other: {
    icon: Code,
    label: "Other",
    color: "text-gray-600"
  },
};

// Map field to label
const fieldLabels: Record<string, string> = {
  it: "Information Technology",
  cs: "Computer Science",
  lg: "Languages",
  other: "Other",
};

// Map status to color and label
const statusConfig: Record<string, { color: string; label: string }> = {
  scheduled: { 
    color: "bg-blue-100 text-blue-800 border-blue-200", 
    label: "Scheduled" 
  },
  completed: { 
    color: "bg-green-100 text-green-800 border-green-200", 
    label: "Completed" 
  },
  cancelled: { 
    color: "bg-gray-100 text-gray-800 border-gray-200", 
    label: "Cancelled" 
  },
  expired: { 
    color: "bg-red-100 text-red-800 border-red-200", 
    label: "Expired" 
  },
};

const UserInterviewCard: React.FC<UserInterviewCardProps> = ({ interview, onDelete }) => {
  const router = useRouter();
  
  const difficultyStyle = difficultyConfig[interview.difficulty];
  const typeInfo = typeConfig[interview.type] || typeConfig.other;
  const TypeIcon = typeInfo?.icon || Code;
  const statusStyle = interview.status ? statusConfig[interview.status] : statusConfig.scheduled;
  
  const handleStartInterview = () => {
    router.push(`/interview/${interview.id}`);
  };

  const handleEdit = () => {
    router.push(`/interview/edit/${interview.id}`);
  };

  const formatDate = (date: string | number | Date) => {
    const dateObj = new Date(date);
    return format(dateObj, "MMM d, yyyy");
  };

  const formatTime = (date: string | number | Date) => {
    const dateObj = new Date(date);
    return format(dateObj, "h:mm a");
  };

  return (
    <Card className="flex flex-col h-full overflow-hidden border-2 hover:border-primary/50 transition-all duration-200 hover:shadow-md">
      <div className="grid md:grid-cols-[1fr_auto] border-b">
        <CardHeader className="pb-4">
          <div className="flex flex-wrap gap-2 mb-2">
            <Badge variant="outline" className={difficultyStyle.color}>
              {difficultyStyle.label}
            </Badge>
            {interview.status && (
              <Badge variant="outline" className={statusStyle.color}>
                {statusStyle.label}
              </Badge>
            )}
            {interview.emailNotification && (
              <Badge variant="outline" className="bg-blue-50 text-blue-700 hover:bg-blue-100">
                <Bell className="h-3 w-3 mr-1" />
                Notifications
              </Badge>
            )}
          </div>
          <CardTitle className="text-lg leading-tight">{interview.title}</CardTitle>
          {interview.description && (
            <CardDescription className="mt-2 line-clamp-2">
              {interview.description}
            </CardDescription>
          )}
        </CardHeader>
        
        <div className="flex flex-col justify-center px-4 py-4 bg-muted/10 border-l">
          <div className="flex items-center text-sm mb-1">
            <CalendarDays className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{formatDate(interview.date)}</span>
          </div>
          <div className="flex items-center text-sm">
            <Clock className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{formatTime(interview.date)}</span>
          </div>
        </div>
      </div>

      <CardContent className="pt-6 flex-grow">
        <div className="grid gap-4 sm:grid-cols-2">
          <div>
            <div className="flex items-center gap-2 mb-3">
              <div className={`rounded-md bg-primary/10 p-2 w-fit`}>
                <TypeIcon className={`h-4 w-4 ${typeInfo.color}`} />
              </div>
              <span className="font-medium text-sm">{typeInfo.label}</span>
            </div>
            
            <div className="flex items-center text-sm text-muted-foreground mb-2">
              <Code className="mr-2 h-4 w-4" />
              <span>{fieldLabels[interview.field]}</span>
            </div>
            
            {interview.company && (
              <div className="flex items-center text-sm text-muted-foreground mb-2">
                <Building className="mr-2 h-4 w-4" />
                <span>{interview.company}</span>
              </div>
            )}
            
            {interview.position && (
              <div className="flex items-center text-sm text-muted-foreground mb-2">
                <Briefcase className="mr-2 h-4 w-4" />
                <span>{interview.position}</span>
              </div>
            )}
          </div>
          
          {interview.notes && (
            <div>
              <h4 className="text-sm font-medium mb-2 flex items-center">
                <MessageCircle className="h-4 w-4 mr-2 text-muted-foreground" />
                Notes
              </h4>
              <p className="text-sm text-muted-foreground line-clamp-3">{interview.notes}</p>
            </div>
          )}
        </div>
      </CardContent>
      
      <Separator />
      
      <CardFooter className="justify-between py-3">
        <Button 
          variant="outline" 
          size="sm" 
          onClick={handleEdit}
          className="gap-1"
        >
          <Edit className="h-4 w-4" />
          Edit
        </Button>
        
        <Button 
          variant="default" 
          size="sm" 
          onClick={handleStartInterview}
          className="bg-green-600 hover:bg-green-700 gap-1"
        >
          <Play className="h-4 w-4" />
          Start Interview
        </Button>
      </CardFooter>
    </Card>
  );
};

export default UserInterviewCard;
